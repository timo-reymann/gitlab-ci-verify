version: '2.1'

only_tags: &only_tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /.*/

orbs:
  github-cli: circleci/github-cli@2.7.0
  docker: circleci/docker@2.8.2
  codecov: codecov/codecov@5.4.3
  go: circleci/go@3.0.2
  github-utils: trustedshops-public/github-utils@1.1.3
  semantic-release: trustedshops-public/semantic-release@6.0.0

executors:
  go:
    docker:
      - image: cimg/go:1.24
  python:
    docker:
      - image: cimg/python:3.13
  node:
    docker:
      - image: cimg/python:3.13-node

jobs:
  unit-test-cli:
    executor: go
    steps:
      - checkout
      - go/with-cache:
          steps:
            - run:
                name: Run tests
                command: |
                  go test -coverprofile=coverage.txt -covermode=atomic   -v ./...
                  make save-coverage-report
      - codecov/upload
      - store_artifacts:
          path: coverage.html
  unit-test-python-wrapper:
    executor: python
    environment:
      PIP_CACHE_DIR: /tmp/pip-cache
    steps:
      - checkout
      - restore_cache:
          key: python-wrapper-dependencies-{{ checksum "python_wrapper/pyproject.toml" }}
      - run:
          name: Test package
          command: |
            cd python_wrapper
            pip install .[dev]
            coverage run -m unittest discover --pattern "*_test.py"
            coverage xml -i
      - codecov/upload
      - save_cache:
          key: python-wrapper-dependencies-{{ checksum "python_wrapper/pyproject.toml" }}
          paths:
            - "/tmp/pip-cache"
  integration-test:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: |
            git submodule sync
            git submodule update --init --recursive
      - go/with-cache:
          steps:
            - run:
                name: Run integration tests
                command: make integration-test
      - store_test_results:
          path: report.xml
  build-cli:
    executor: go
    steps:
      - checkout
      - go/with-cache:
          steps:
            - run:
                name: Build binaries
                command: |
                  make build -j4
                  make create-checksums
            - persist_to_workspace:
                root: ./
                paths:
                  - dist/
  build-python-wrapper:
    executor: python
    environment:
      PIP_CACHE_DIR: /tmp/pip-cache
    steps:
      - checkout
      - restore_cache:
          key: python-wrapper-dependencies-{{ checksum "python_wrapper/pyproject.toml" }}
      - run:
          name: Build package
          command: |
            cd python_wrapper
            pip install .[dev]
            python3 -m build
      - save_cache:
          key: python-wrapper-dependencies-{{ checksum "python_wrapper/pyproject.toml" }}
          paths:
            - "/tmp/pip-cache"
      - persist_to_workspace:
          paths:
            - python_wrapper/dist
          root: .
          name: Save python package artifacts
  build-gh-pages:
    executor: node
    environment:
      PIP_CACHE_DIR: /tmp/pip-cache
    steps:
      - checkout
      - restore_cache:
          key: python-wrapper-dependencies-{{ checksum "python_wrapper/pyproject.toml" }}
      - run:
          name: Build html documentation for python wrapper
          command: |
            git submodule sync
            git submodule update --init --recursive
            cd python_wrapper
            pip install .[dev]
            pydoctor
            mkdir ../gh-pages/
            mv gh-pages/ ../gh-pages/python-wrapper/
      - save_cache:
          key: python-wrapper-dependencies-{{ checksum "python_wrapper/pyproject.toml" }}
          paths:
            - "/tmp/pip-cache"
      - run:
          name: Clear cache for mkdocs build
          command: rm -rf /tmp/pip-cache
      - restore_cache:
          key: mkdocs-dependencies-{{ checksum "requirements-docs.txt" }}
      - run:
          name: Build mkdocs documentation
          command: |
            pip install -r requirements-docs.txt
            mkdocs build
            mv site/* gh-pages/
      - save_cache:
          key: mkdocs-dependencies-{{ checksum "requirements-docs.txt" }}
          paths:
            - "/tmp/pip-cache"
      - github-utils/publish_github_pages:
          folder: gh-pages/
          git_commit_author_email: "no-reply@timo-reymann.de"
          git_commit_author_name: "CircleCI"
  attach-binaries-to-release:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - github-cli/install:
          version: "2.21.2"
      - run:
          name: Attach binaries to release
          command: |
            gh release upload ${CIRCLE_TAG} dist/*  python_wrapper/dist/*
  publish-python-wrapper:
    executor: python
    environment:
      PIP_CACHE_DIR: /tmp/pip-cache
    steps:
      - checkout
      - attach_workspace:
          at: .
          name: Retrieve persisted binaries
      - restore_cache:
          key: python-publish-dependencies-v1
      - run:
          name: Build and upload binary wheel
          command: |
            pip install twine==5.* binary_wheel_builder[cli]==3.*
            mkdir -p dist/wheel/
            export VERSION="${CIRCLE_TAG##v}"
            binary-wheel-builder --wheel-spec wheel.yaml --dist-folder dist/wheel/
            twine upload -r pypi dist/wheel/*
      - run:
          name: Upload wrapper package
          command: |
            cd python_wrapper/
            twine upload -r pypi dist/*
      - save_cache:
          key: python-publish-dependencies-v1
          paths:
            - "/tmp/pip-cache"
  publish-docker-image:
    executor: docker/docker
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - setup_remote_docker:
          version: default
      - run:
          name: Build and publish image
          command: |
            echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker buildx create --use
            make build-docker
      - docker/update-description:
          image: timoreymann/gitlab-ci-verify
          docker-username: DOCKER_USERNAME
          docker-password: DOCKER_TOKEN

workflows:
  version: 2
  main:
    jobs:
      - unit-test-cli
      - unit-test-python-wrapper
      - build-cli:
          requires:
            - unit-test-cli
      - build-python-wrapper:
          requires:
            - unit-test-python-wrapper
      - build-gh-pages:
          filters:
            branches:
              only: main
          requires:
            - build-python-wrapper
      - integration-test:
          requires:
            - unit-test-python-wrapper
            - unit-test-cli
      - semantic-release/with_existing_config:
          name: semantic-release
          additional_packages: "@google/semantic-release-replace-plugin"
          requires:
            - build-cli
            - build-python-wrapper
            - integration-test
          context:
            - semantic-release
          filters:
            branches:
              only:
                - main
  release:
    jobs:
      - build-cli:
          <<: *only_tags
      - build-python-wrapper:
          <<: *only_tags
      - publish-python-wrapper:
          <<: *only_tags
          requires:
            - build-cli
            - build-python-wrapper
      - publish-docker-image:
          <<: *only_tags
          requires:
            - build-cli
      - attach-binaries-to-release:
          <<: *only_tags
          requires:
            - build-cli
            - build-python-wrapper
