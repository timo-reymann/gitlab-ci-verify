version: '2.1'

job_defaults: &job_defaults
  filters:
    tags:
      only: /.*/

only_tags: &only_tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /.*/

orbs:
  github-cli: circleci/github-cli@2.5.0
  docker: circleci/docker@2.8.0
  codecov: codecov/codecov@5.0.1
  go: circleci/go@1.12.0
  github-utils: trustedshops-public/github-utils@1.1.2
  semantic-release: trustedshops-public/semantic-release@6.0.0

executors:
  go:
    docker:
      - image: cimg/go:1.23
  python:
    docker:
      - image: cimg/python:3.12
  node:
    docker:
      - image: cimg/python:3.12-node

jobs:
  test:
    executor: go
    steps:
      - checkout
      - go/load-cache
      - run:
          name: Run tests
          command: |
            gotestsum --junitfile unit-tests.xml
            make save-coverage-report
      - run:
          name: Get test coverage
          command: |
            go test -race -coverprofile=coverage.txt -covermode=atomic  -v ./...
      - go/save-cache
      - codecov/upload
      - store_test_results:
          path: unit-tests.xml
      - store_artifacts:
          path: unit-tests.xml
      - store_artifacts:
          path: coverage.html
  build:
    executor: go
    steps:
      - checkout
      - go/load-cache
      - run:
          name: Build binaries
          command: |
            make build -j4
      - persist_to_workspace:
          root: ./
          paths:
            - dist/
      - go/save-cache
  test_python_wrapper:
    executor: python
    environment:
      PIP_CACHE_DIR: /tmp/pip-cache
    steps:
      - checkout
      - restore_cache:
          key: python-wrapper-dependencies-{{ checksum "python_wrapper/pyproject.toml" }}
      - run:
          name: Test package
          command: |
            cd python_wrapper
            pip install .[dev]
            coverage run -m unittest discover --pattern "*_test.py"
            coverage xml -i
      - codecov/upload
      - save_cache:
          key: python-wrapper-dependencies-{{ checksum "python_wrapper/pyproject.toml" }}
          paths:
            - "/tmp/pip-cache"
  publish_python_packages:
    executor: python
    environment:
      PIP_CACHE_DIR: /tmp/pip-cache
    steps:
      - checkout
      - attach_workspace:
          at: .
          name: Retrieve persisted binaries
      - restore_cache:
          key: python-publish-dependencies-v1
      - run:
          name: Build and upload binary wheel
          command: |
            pip install twine==5.* binary_wheel_builder[cli]==3.*
            mkdir -p dist/wheel/
            export VERSION="${CIRCLE_TAG##v}"
            binary-wheel-builder --wheel-spec wheel.yaml --dist-folder dist/wheel/
            twine upload -r pypi dist/wheel/*
      - run:
          name: Upload wrapper package
          command: |
            cd python_wrapper/
            twine upload -r pypi dist/*
      - save_cache:
          key: python-publish-dependencies-v1
          paths:
            - "/tmp/pip-cache"
  publish_docker_image:
    executor: docker/docker
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - setup_remote_docker:
          version: default
      - run:
          name: Build and publish image
          command: |
            echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker buildx create --use
            make build-docker
      - docker/update-description:
          image: timoreymann/gitlab-ci-verify
          docker-username: DOCKER_USERNAME
          docker-password: DOCKER_TOKEN

  build_python_wrapper:
    executor: python
    environment:
      PIP_CACHE_DIR: /tmp/pip-cache
    steps:
      - checkout
      - restore_cache:
          key: python-wrapper-dependencies-{{ checksum "python_wrapper/pyproject.toml" }}
      - run:
          name: Build package
          command: |
            cd python_wrapper
            pip install .[dev]
            python3 -m build
      - save_cache:
          key: python-wrapper-dependencies-{{ checksum "python_wrapper/pyproject.toml" }}
          paths:
            - "/tmp/pip-cache"
      - persist_to_workspace:
          paths:
            - python_wrapper/dist
          root: .
          name: Save python package artifacts

  build_gh_pages:
    executor: node
    environment:
      PIP_CACHE_DIR: /tmp/pip-cache
    steps:
      - checkout
      - restore_cache:
          key: python-wrapper-dependencies-{{ checksum "python_wrapper/pyproject.toml" }}
      - run:
          name: Build html documentation for python wrapper
          command: |
            git submodule sync
            git submodule update --init --recursive
            cd python_wrapper
            pip install .[dev]
            pydoctor
            mkdir ../gh-pages/
            mv gh-pages/ ../gh-pages/python-wrapper/
      - save_cache:
          key: python-wrapper-dependencies-{{ checksum "python_wrapper/pyproject.toml" }}
          paths:
            - "/tmp/pip-cache"
      - github-utils/publish_github_pages:
          folder: gh-pages/
          git_commit_author_email: "no-reply@timo-reymann.de"
          git_commit_author_name: "CircleCI"
  attach_binaries_to_release:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - github-cli/install:
          version: "2.21.2"
      - run:
          name: Attach binaries to release
          command: |
            gh release upload ${CIRCLE_TAG} dist/*  python_wrapper/dist/*

workflows:
  version: 2
  main:
    jobs:
      - test:
          <<: *job_defaults
      - test_python_wrapper:
          <<: *job_defaults
      - build:
          <<: *job_defaults
          requires:
            - test
      - build_python_wrapper:
          <<: *job_defaults
          requires:
            - test_python_wrapper
      - semantic-release/with_existing_config:
          <<: *job_defaults
          name: semantic-release
          additional_packages: "@google/semantic-release-replace-plugin"
          requires:
            - build
            - build_python_wrapper
          context:
            - semantic-release
          filters:
            branches:
              only:
                - main
      - build_gh_pages:
          <<: *only_tags
          requires:
            - build_python_wrapper
      - publish_python_packages:
          <<: *only_tags
          requires:
            - build
            - build_python_wrapper
      - publish_docker_image:
          <<: *only_tags
          requires:
            - build
      - attach_binaries_to_release:
          <<: *only_tags
          requires:
            - build
            - build_python_wrapper
