version: '2.1'

job_defaults: &job_defaults
  filters:
    tags:
      only: /.*/

orbs:
  github-cli: circleci/github-cli@2.4.0
  docker: circleci/docker@2.7.1
  codecov: codecov/codecov@4.1.0
  go: circleci/go@1.12.0
  github-utils: trustedshops-public/github-utils@1.1.2
  python: circleci/python@2.1.1

executors:
  go:
    docker:
      - image: cimg/go:1.23
  python:
    docker:
      - image: cimg/python:3.12
  node:
    docker:
      - image: cimg/python:3.12-node

jobs:
  test:
    executor: go
    steps:
      - checkout
      - go/load-cache
      - run:
          name: Run tests
          command: |
            gotestsum --junitfile unit-tests.xml
            make save-coverage-report
      - run:
          name: Get test coverage
          command: |
            go test -race -coverprofile=coverage.txt -covermode=atomic  -v ./...
      - go/save-cache
      - codecov/upload
      - store_test_results:
          path: unit-tests.xml
      - store_artifacts:
          path: unit-tests.xml
      - store_artifacts:
          path: coverage.html
  build:
    executor: go
    steps:
      - checkout
      - go/load-cache
      - run:
          name: Build binaries
          command: |
            make build -j4
      - persist_to_workspace:
          root: ./
          paths:
            - dist/
      - go/save-cache
  publish_python_wheel:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
          name: Retrieve persisted binaries
      - run:
          name: Install dependencies
          command: |
            pip install twine==5.* binary_wheel_builder[cli]==3.*
      - run:
          name: Build wheel
          command: |
            mkdir -p dist/wheel/
            export VERSION="${CIRCLE_TAG##v}"
            binary-wheel-builder --wheel-spec wheel.yaml --dist-folder dist/wheel/
      - run:
          name: Upload wheel
          command: |
            twine upload -r pypi dist/wheel/* 
  publish_docker_image:
    executor: docker/docker
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - setup_remote_docker:
          version: default
      - run:
          name: Build and publish image
          command: |
            echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker buildx create --use
            make build-docker
      - docker/update-description:
          image: timoreymann/deterministic-zip
          docker-username: DOCKER_USERNAME
          docker-password: DOCKER_TOKEN

  build_python_wrapper:
    executor: python
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: ""
          app-dir: "python_wrapper"
      - run:
          name: Build package
          command: |
            cd python_wrapper
            python3 -m build
      - persist_to_workspace:
          paths:
            - python_wrapper/build
          root: .
          name: Save python package artifacts

  build_gh_pages:
    executor: node
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: ""
          app-dir: "python_wrapper"
      - run:
          name: Build html documentation for python wrapper
          command: |
            git submodule sync
            git submodule update --init --recursive
            pydoctor
      - github-utils/publish_github_pages:
          folder: gh-pages/
          git_commit_author_email: "no-reply@timo-reymann.de"
          git_commit_author_name: "CircleCI"

workflows:
  version: 2
  build:
    jobs:
      - test:
          <<: *job_defaults
      - build:
          <<: *job_defaults
          requires:
            - test
      - build_python_wrapper
      - build_gh_pages:
          requires:
            - build_python_wrapper
      - publish_python_wheel:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          requires:
            - build
      - publish_docker_image:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          requires:
            - build
